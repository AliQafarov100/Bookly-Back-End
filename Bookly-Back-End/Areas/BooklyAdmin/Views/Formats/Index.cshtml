@using X.PagedList
@using X.PagedList.Mvc.Core
@model IEnumerable<Bookly_Back_End.Models.Format>

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-action="Create" class="btn btn-danger">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    <a class="btn btn-success" asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                    <a class="btn btn-primary" asp-action="Details" asp-route-id="@item.Id">Details</a> |
                    <a class="btn btn-danger" asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>
@Html.PagedListPager((IPagedList)Model, page => Url.Action("Index", new { page }), new X.PagedList.Web.Common.PagedListRenderOptionsBase
{
    LiElementClasses = new[] { "page-item" },
    PageClasses = new[] { "page-link" }
})